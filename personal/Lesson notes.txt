Router - Controller - Model

Model: Defines the objects we are gonna work with ?And gives functions to manipulate them? (export: model)

Controller: Does the real work () (import: model - export functions get, post...)

Router: Groups endpoints by subdirectory, so they can be hadle as independent apps. They are actually a middleware, that we have to add to app.js. (import: controllers - export the router so it can be add to app.js as middleware)


* Keep in mind that a controller can make use of several models, and a model can be used in several controllers. However, usually, there is one controllers file for each router.


LOAD DATA BEFORE PRESENTING TO THE USER

Many times, we need to load data before presenting it to the user. In this case, it happens with the "planets" collection.
If we just use the fs.createReadStream, as it happens async, the program will keep runing and the array would be returned to the controller before
the data has being read and loaded.

To prevent that, we wrap the fs.createReadStream in a function that returns a promise. This promise resolves only when all info has been loaded (and rejects if there is an error)
Then, in server.js, we import that function and "await" for it to finiss. If we are using ESM, then we can just use await out of any functions. If we are using classic modules, we need to wrap
it in an async function.

This pattern is pretty common and worth remembering.

Today, there is a built-in method for this: https://nodejs.org/api/stream.html#stream_streams_promises_api


RUNNING FRONT AND BACK END AT THE SAME times

In order to run our application during dev, we have to keep "starting" both, going back and forth, which is not very convenient.
Instead, what we can do is init npm at the root directory (until now we had just 2 npm projects: client and server) and, in the new package.json, do:
    "server": "npm run watch --prefix server",
    "client": "npm start --prefix client",
    "watch": "npm run server & npm run client",

(--prefix tells npm the directory where you want to execute the command)
(We only use one "&" because we don't want the first command to finish before executing the second one. The 1st executes in the background WHILE the 2nd runs)
This way, we can just do npm run watch from the root and start both, the client and the server

We can use this same approach to automate task that requires both client and server (like running tests, install dependencies, etc.)


DEPLOYING IN THE SAME SERVER
Up until now, we have been working on the --code that is gonna create the output code that's gonna see the user--, not the "final code". Our frontend needs to be "built".
In package.json, we have the "build" command and we can chose to "build" our app in the same port that we are creating the server by doing (in package.json of the client):
    "build": "BUILD_PATH =..server/public react-scripts build",
